data <- read.csv2("/Users/badisbensalem/Desktop/M1/programation_R/haja_comme_ca")
library(shiny)
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(countrycode)
# Charger les données
but <- read.csv("/Users/badisbensalem/Desktop/M1/programation/webscraping/webscrap_data_foot/data_foot/goalscorers.csv")
resultat <- read.csv("/Users/badisbensalem/Desktop/M1/programation/webscraping/webscrap_data_foot/data_foot/results.csv")
shootout <- read.csv("/Users/badisbensalem/Desktop/M1/programation/webscraping/webscrap_data_foot/data_foot/shootouts.csv")
# Ajouter une colonne pour l'équipe gagnante
resultat <- resultat %>%
mutate(winner = case_when(
home_score > away_score ~ home_team,
home_score < away_score ~ away_team,
TRUE ~ "Draw"
))
# Convertir la colonne date en format Date et filtrer les matchs
resultat <- resultat %>%
mutate(date = ymd(date)) %>%
filter(date >= "1975-01-01")  # Garder seulement les matchs à partir de 1975
# Filtrer les matchs sans les matchs nuls
resultat_sans_nuls <- resultat %>%
filter(winner != "Draw")
# Calculer les victoires par équipe sans les matchs nuls
resultat_victoires <- resultat_sans_nuls %>%
count(winner, sort = TRUE)
# Calculer le nombre de matchs joués par chaque équipe
match_counts <- resultat %>%
select(home_team, away_team) %>%
pivot_longer(cols = c(home_team, away_team), names_to = "team_type", values_to = "team") %>%
count(team) %>%
rename(matches_played = n)
# Filtrer les équipes ayant joué au moins 30 matchs
match_counts <- match_counts %>%
filter(matches_played >= 30)
# Liste des remplacements pour les pays problématiques
team_counts_replacements <- c(
"Scotland" = "United Kingdom",
"Northern Ireland" = "United Kingdom",
"Kosovo" = "Serbia",
"Czechoslovakia" = "Czech Republic",
"Abkhazia" = "Georgia",
"England" = "United Kingdom",
"Basque Country" = "Spain",
"German DR" = "Germany",
"Occitania" = "France",
"Yugoslavia" = "Serbia",
"Wales" = "United Kingdom",
"Zanzibar" = "Tanzania",
"Alderney" = "United Kingdom",
"Bonaire" = "Netherlands",
"Frøya" = "Norway",
"Gotland" = "Sweden",
"Isle of Wight" = "United Kingdom",
"Padania" = "Italy",
"Saare County" = "Estonia",
"Saint Martin" = "France",
"Shetland" = "United Kingdom",
"Western Isles" = "United Kingdom",
"Ynys Môn" = "United Kingdom"
)
# Remplacer les noms d'équipes problématiques
match_counts <- match_counts %>%
mutate(team = recode(team, !!!team_counts_replacements))
# Joindre les deux tableaux et calculer le ratio de victoires
team_performance <- match_counts %>%
left_join(resultat_victoires, by = c("team" = "winner")) %>%
mutate(
n = coalesce(n, 0),  # Remplacer les NA par 0 si une équipe n'a aucune victoire
win_ratio = n / matches_played  # Calculer le ratio victoires / matchs joués
) %>%
mutate(continent = countrycode(team, "country.name", "continent", custom_match = team_counts_replacements)) %>%
arrange(desc(win_ratio))  # Classer par ratio décroissant
# Vérifier les résultats
View(team_performance)  # Afficher le tableau
# Début de l'application Shiny
ui <- fluidPage(
titlePanel("Classement des Équipes par Continents"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("continent",
"Sélectionnez un continent:",
choices = unique(team_performance$continent),
selected = unique(team_performance$continent)),
sliderInput("dateRange",
"Sélectionnez une date:",
min = as.Date("1975-01-01"),
max = Sys.Date(),
value = c(as.Date("1975-01-01"), Sys.Date()),
timeFormat = "%Y-%m-%d"),
actionButton("update", "Mettre à jour le graphique")
),
mainPanel(
plotOutput("teamPlot")
)
)
)
server <- function(input, output) {
filtered_data <- reactive({
req(input$continent)  # S'assurer qu'un continent est sélectionné
# Filtrer le tableau resultat selon les dates choisies
filtered_results <- resultat %>%
filter(date >= input$dateRange[1] & date <= input$dateRange[2]) %>%
filter(winner != "Draw")
# Calculer le nombre de victoires par équipe sur cette période
victoires <- filtered_results %>%
count(winner, sort = TRUE)
# Calculer le nombre de matchs joués par chaque équipe sur cette période
match_counts_filtered <- filtered_results %>%
select(home_team, away_team) %>%
pivot_longer(cols = c(home_team, away_team), names_to = "team_type", values_to = "team") %>%
count(team) %>%
rename(matches_played = n)
# Joindre les deux tableaux et calculer le ratio de victoires
team_performance_filtered <- match_counts_filtered %>%
left_join(victoires, by = c("team" = "winner")) %>%
mutate(
n = coalesce(n, 0),  # Remplacer les NA par 0 si une équipe n'a aucune victoire
win_ratio = n / matches_played  # Calculer le ratio victoires / matchs joués
) %>%
mutate(continent = countrycode(team, "country.name", "continent", custom_match = team_counts_replacements)) %>%
filter(continent %in% input$continent) %>%
arrange(desc(win_ratio)) %>%
head(10)  # Garder les 10 meilleurs
return(team_performance_filtered)
})
observeEvent(input$update, {
output$teamPlot <- renderPlot({
req(filtered_data())  # Attendre que les données soient prêtes
# Définir une palette de couleurs
color_palette <- c(
"Africa" = "darkgreen",
"Asia" = "orange",
"Europe" = "blue",
"North America" = "red",
"Oceania" = "purple",
"South America" = "yellow"
)
# Créer le graphique
ggplot(filtered_data(), aes(x = reorder(team, win_ratio), y = win_ratio, fill = continent)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Top 10 Équipes par Ratio de Victoires",
x = "Équipe",
y = "Ratio de Victoires Moyenne") +
scale_fill_manual(values = color_palette) +  # Appliquer la palette de couleurs
theme_minimal()
})
})
}
shinyApp(ui = ui, server = server)
# Charger les données
data <- read.csv2("/Users/badisbensalem/Desktop/M1/Cours Régression (Mme. Babykina)/TP Régression linéaire-20241127/Intima_Media.csv")
cars <- read.csv("/Users/badisbensalem/Desktop/M1/cours ngessan/Fwd informations cours Analyse Des Données tp1/mtcars.csv")
install.packages("corrplot")
install.packages("Hmisc")
library(corrplot)
library(Hmisc)
head(cars)
cars_numeric <- cars[, !colnames(cars) %in% "manufacturer"]
M <- cor(cars_numeric)
head(round(M, 2))
rcorr(M)
rcorr(M[,1:7])
corrplot(M, type="upper")
# une correlation est symétrique, une corrélation entre y et y estla même qu'entre y et x. La couleur et la
#grandeur des cercles, tout ce qui est bleu = corrélation positive
#tout ce qui est rouge = corrélation négative
#mais on recherche les corrélations significative donc qui sont proche de 1 (bleu) ou de -1 (rouge)
#La question qui se pose est de savoir à partir de quelle valeur on parle de corrélation significative
# Soit un manuel impose une norme, sois on utilise la matrice de p valeur vu avant.
#Ce tableau (rcorr) nous donne la nuance de significativité
#On ne cherche pas des bornes de décision mais les risques de se tromper.
#Avant on pose les hypothèses. Ici l'hypothèse sur laquelle on part H0 c'est que le coefficiebt de corrélation est nulle donc il n'y a pas de corrélation linéaire
#Puis on pose le risque, de base on prend 5%.
#On traaille sur une décision qui impacte la population entière. Pour chaque corrélation calculé on calcule la p valeur
# Tant que la p valeur < 5% on rejette l'hypothèse H0
# Lorsque p valeur > 5% on ne peut pas rejetter H0
corrplot(M, method="circle")
corrplot(M, method="pie")
corrplot(M, method="color")
corrplot(M, method="number")
corrplot(M, type="lower")
corrplot(M, type="upper", order="hclust")
corrplot(M, type="upper", order="hclust", col=c("black", "white"),
bg="lightblue")
library(RColorBrewer)
corrplot(M, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdBu"))
symnum(M, abbr.colnames=FALSE)
summary(cars_numeric)
describe(cars_numeric)
#ACP-------------------------------------------------------------------
install.packages("FactoMineR")
library(FactoMineR)
head(cars_numeric)
install.packages("psych")
library(psych)
describe(cars_numeric)
resultat=PCA(cars_numeric[,1:11], graph=FALSE)
install.packages("explor")
library(explor)
install.packages("FactoMineR")
library(FactoMineR)
#TOUT LES RESULTATS CST EXCELLENT--------------------
resultat=PCA(cars_numeric,graph=FALSE)
explor::explor(resultat)
